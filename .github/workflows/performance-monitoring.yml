name: Performance Monitoring - Task 4.1.4

# Performance monitoring and regression detection workflow
# Validates optimizations from Tasks 4.1.1-4.1.3 are maintained
# SECURITY: CWE-78 remediation applied - input validation prevents command injection
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance monitoring daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      validation_type:
        description: 'Type of validation to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'precommit'
          - 'docker'
          - 'ci'
      alert_on_regression:
        description: 'Fail build on performance regression'
        required: false
        default: true
        type: boolean

jobs:
  performance-monitoring:
    name: Performance Baseline Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        # Test on multiple Python versions for stability
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for trend analysis

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Install dependencies with UV
        run: |
          uv sync --all-extras

      - name: Cache pre-commit environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install pre-commit hooks
        run: |
          uv run pre-commit install

      - name: Run Performance Baseline Validation
        id: validation
        run: |
          # Set validation type from input with security validation
          INPUT_VALIDATION_TYPE="${{ github.event.inputs.validation_type || 'all' }}"

          # Validate input against allowed values to prevent command injection
          case "$INPUT_VALIDATION_TYPE" in
            "all"|"precommit"|"docker"|"ci")
              VALIDATION_TYPE="$INPUT_VALIDATION_TYPE"
              ;;
            *)
              echo "Error: Invalid validation type '$INPUT_VALIDATION_TYPE'. Allowed values: all, precommit, docker, ci"
              exit 1
              ;;
          esac

          echo "Running performance validation: $VALIDATION_TYPE"

          if [ "$VALIDATION_TYPE" = "all" ]; then
            make performance-validate
          else
            make "performance-validate-$VALIDATION_TYPE"
          fi
        env:
          # Optimize for CI environment
          PRE_COMMIT_PARALLEL: 8
          PRE_COMMIT_COLOR: never
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain

      - name: Run Performance Regression Detection
        id: regression
        run: |
          # Check if we should alert on regression with input validation
          INPUT_ALERT_ON_REGRESSION="${{ github.event.inputs.alert_on_regression || 'true' }}"

          # Validate boolean input to prevent command injection
          case "$INPUT_ALERT_ON_REGRESSION" in
            "true"|"false")
              ALERT_ON_REGRESSION="$INPUT_ALERT_ON_REGRESSION"
              ;;
            *)
              echo "Error: Invalid alert_on_regression value '$INPUT_ALERT_ON_REGRESSION'. Allowed values: true, false"
              exit 1
              ;;
          esac

          if [ "$ALERT_ON_REGRESSION" = "true" ]; then
            make performance-monitor-ci
          else
            make performance-monitor
          fi
        continue-on-error: false
        env:
          # Safe approach: Use the validated environment variable for error handling
          CONTINUE_ON_ERROR: ${{ github.event.inputs.alert_on_regression == 'false' }}

      - name: Generate Performance Reports
        if: always()
        run: |
          # Generate comprehensive reports
          make performance-validate-report
          make performance-monitor-report

          # Create summary for GitHub Actions
          echo "## Performance Monitoring Results - Task 4.1.4" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Validation Status" >> $GITHUB_STEP_SUMMARY

          if [ -f performance_baseline_report.md ]; then
            # Extract key metrics from report
            echo "‚úÖ Performance baseline validation completed" >> $GITHUB_STEP_SUMMARY

            # Add performance summary to step summary
            grep -A 20 "## Status Summary" performance_baseline_report.md >> $GITHUB_STEP_SUMMARY || true
          else
            echo "‚ùå Performance baseline validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f performance_monitoring_report.md ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Regression Detection" >> $GITHUB_STEP_SUMMARY
            grep -A 10 "## Status Summary" performance_monitoring_report.md >> $GITHUB_STEP_SUMMARY || true
          fi

      - name: Upload Performance Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports-${{ matrix.python-version }}
          path: |
            performance_baseline_report.md
            performance_monitoring_report.md
            performance_validation_results.json
            performance_monitoring_data.json
            ci_performance_results.json
            precommit_benchmark_results.json
          retention-days: 30

      - name: Comment PR with Performance Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üéØ Performance Monitoring Results - Task 4.1.4\n\n';

            // Read validation report if available
            try {
              if (fs.existsSync('performance_baseline_report.md')) {
                const report = fs.readFileSync('performance_baseline_report.md', 'utf8');

                // Extract executive summary
                const summaryMatch = report.match(/## Executive Summary([\s\S]*?)## /m);
                if (summaryMatch) {
                  comment += '### Validation Summary\n';
                  comment += summaryMatch[1].trim() + '\n\n';
                }
              }
            } catch (error) {
              comment += '‚ùå Could not read performance validation report\n\n';
            }

            // Read monitoring report if available
            try {
              if (fs.existsSync('performance_monitoring_report.md')) {
                const monitorReport = fs.readFileSync('performance_monitoring_report.md', 'utf8');

                // Extract status summary
                const statusMatch = monitorReport.match(/## Status Summary([\s\S]*?)## /m);
                if (statusMatch) {
                  comment += '### Regression Detection\n';
                  comment += statusMatch[1].trim() + '\n\n';
                }
              }
            } catch (error) {
              comment += '‚ùå Could not read regression detection report\n\n';
            }

            comment += '### Performance Targets\n';
            comment += '- **Task 4.1.1**: Pre-commit <2s (optimized: 0.985s)\n';
            comment += '- **Task 4.1.2**: Docker cached <5s (optimized: 0.7s)\n';
            comment += '- **Task 4.1.3**: CI pipeline <5min (optimized: <3min)\n\n';

            comment += '*Performance monitoring validates all optimizations are maintained.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  performance-trend-analysis:
    name: Performance Trend Analysis
    runs-on: ubuntu-latest
    needs: performance-monitoring
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download performance reports
        uses: actions/download-artifact@v4
        with:
          name: performance-reports-3.12
          path: ./performance-reports

      - name: Analyze Performance Trends
        run: |
          echo "## Performance Trend Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if we have historical data
          if [ -f ./performance-reports/performance_monitoring_data.json ]; then
            echo "üìä Historical performance data available" >> $GITHUB_STEP_SUMMARY

            # Extract trend information
            python3 -c "
          import json
          import sys

          try:
              with open('./performance-reports/performance_monitoring_data.json') as f:
                  data = json.load(f)

              history = data.get('performance_history', [])
              print(f'üìà Performance history: {len(history)} data points')

              if len(history) >= 2:
                  latest = history[-1]
                  previous = history[-2]

                  # Compare pre-commit performance
                  if ('measurements' in latest and 'measurements' in previous and
                      'precommit' in latest['measurements'] and 'precommit' in previous['measurements']):

                      latest_pc = latest['measurements']['precommit'].get('duration_seconds', 0)
                      prev_pc = previous['measurements']['precommit'].get('duration_seconds', 0)

                      if prev_pc > 0:
                          change = ((latest_pc - prev_pc) / prev_pc) * 100
                          print(f'Pre-commit trend: {change:.1f}% change ({latest_pc}s vs {prev_pc}s)')
          except Exception as e:
              print(f'Error analyzing trends: {e}')
          " >> $GITHUB_STEP_SUMMARY
          else
            echo "üìä No historical data available yet" >> $GITHUB_STEP_SUMMARY
            echo "Performance monitoring will build trend data over time" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Monitoring Status" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Task 4.1.4 performance monitoring active" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Performance baseline validation operational" >> $GITHUB_STEP_SUMMARY
          echo "- üö® Automated regression detection enabled" >> $GITHUB_STEP_SUMMARY
          echo "- üìà Performance trend analysis available" >> $GITHUB_STEP_SUMMARY
