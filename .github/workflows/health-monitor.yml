name: Project Health Monitor

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      detailed_scan:
        description: 'Run detailed security and dependency scan'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: "3.12.10"

jobs:
  health-check:
    name: Project Health Assessment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: uv sync --all-groups
      
    - name: Check dependency health
      run: |
        echo "üîç Checking dependency health..."
        uv run pip list --outdated || true
        
    - name: Run comprehensive security scan
      run: |
        echo "üîí Running security health check..."
        mkdir -p reports
        uv run bandit -r src/ -f json -o reports/health-bandit.json || true
        uv run safety check --json --output reports/health-safety.json || true
        
    - name: Check code quality metrics
      run: |
        echo "üìä Checking code quality metrics..."
        uv run ruff check src/ tests/ --output-format=json > reports/health-ruff.json || true
        
    - name: Run detailed security scan
      if: github.event.inputs.detailed_scan == 'true'
      run: |
        echo "üî¨ Running detailed security analysis..."
        uv run detect-secrets scan --baseline .secrets.baseline || true
        
    - name: Generate health report
      run: |
        echo "üìã Generating health report..."
        cat > reports/health-summary.md << EOF
        # Project Health Report
        
        **Date**: $(date)
        **Repository**: ${{ github.repository }}
        **Branch**: ${{ github.ref_name }}
        
        ## Status Summary
        
        - ‚úÖ Dependencies installed successfully
        - ‚úÖ Security scans completed
        - ‚úÖ Code quality checks completed
        
        ## Next Actions
        
        - Review security scan results
        - Update outdated dependencies
        - Address any code quality issues
        
        ---
        *Generated by Project Health Monitor*
        EOF
        
    - name: Upload health reports
      uses: actions/upload-artifact@v4
      with:
        name: health-reports-${{ github.run_number }}
        path: reports/
        retention-days: 30
        
    - name: Create health issue (if problems found)
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Project Health Check Failed
          
          The automated health check has detected issues that need attention.
          
          **Run ID**: ${{ github.run_id }}
          **Date**: ${new Date().toISOString()}
          
          Please review the workflow logs and health reports for details.
          
          ### Actions Required:
          - [ ] Review security scan results
          - [ ] Update vulnerable dependencies
          - [ ] Fix code quality issues
          - [ ] Verify all systems are operational
          
          This issue was automatically created by the Health Monitor workflow.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['health-check', 'automated', 'needs-attention']
          });

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: uv sync --all-groups
      
    - name: Audit dependencies
      run: |
        echo "üîç Auditing dependencies for security vulnerabilities..."
        uv run safety check --full-report || true
        
    - name: Check for dependency updates
      run: |
        echo "üì¶ Checking for dependency updates..."
        uv run pip list --outdated --format=json > dependency-updates.json || true
        
    - name: Summary
      run: |
        echo "‚úÖ Dependency audit completed"
        echo "üìä Check artifacts for detailed reports"

  code-quality-trends:
    name: Code Quality Trends
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: uv sync --all-groups
      
    - name: Generate code metrics
      run: |
        echo "üìà Generating code quality metrics..."
        
        # Line count
        echo "Lines of code:" > metrics.txt
        find src/ -name "*.py" -exec wc -l {} + | tail -1 >> metrics.txt
        
        # Test coverage (if tests exist)
        if [ -d "tests" ] && [ "$(find tests -name '*.py' | wc -l)" -gt 0 ]; then
          echo "Running test coverage analysis..."
          uv run pytest tests/ --cov=src --cov-report=term-missing --cov-report=json || true
        fi
        
        # Ruff issues count
        echo "Linting issues:" >> metrics.txt
        uv run ruff check src/ tests/ --output-format=json | jq length >> metrics.txt || echo "0" >> metrics.txt
        
    - name: Upload metrics
      uses: actions/upload-artifact@v4
      with:
        name: quality-metrics-${{ github.run_number }}
        path: |
          metrics.txt
          coverage.json
        retention-days: 90

  notification:
    name: Health Status Notification
    runs-on: ubuntu-latest
    needs: [health-check, dependency-audit, code-quality-trends]
    if: always()
    
    steps:
    - name: Success notification
      if: needs.health-check.result == 'success' && needs.dependency-audit.result == 'success' && needs.code-quality-trends.result == 'success'
      run: |
        echo "‚úÖ Project health check completed successfully!"
        echo "All systems are operational and secure."
        
    - name: Warning notification
      if: needs.health-check.result != 'success' || needs.dependency-audit.result != 'success' || needs.code-quality-trends.result != 'success'
      run: |
        echo "‚ö†Ô∏è Project health check completed with warnings!"
        echo "Some issues detected - please review the reports."
