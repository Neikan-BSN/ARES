# GitHub Actions workflow for optimized Docker builds with advanced caching
name: Docker Build with Advanced Caching

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILDKIT_PROGRESS: plain
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [production, development, testing, celery-worker, celery-beat]

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement=network.host
          --allow-insecure-entitlement=security.insecure

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.target }}
          type=ref,event=pr,suffix=-${{ matrix.target }}
          type=sha,suffix=-${{ matrix.target }}
          type=raw,value=latest-${{ matrix.target }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILDKIT_INLINE_CACHE=1
        cache-from: |
          type=gha,scope=${{ matrix.target }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.target }}
        cache-to: |
          type=gha,scope=${{ matrix.target }},mode=max
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.target }},mode=max

    - name: Performance Analysis
      if: github.event_name != 'pull_request'
      run: |
        echo "## Docker Build Performance Report" >> $GITHUB_STEP_SUMMARY
        echo "Target: ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
        echo "Build completed: $(date)" >> $GITHUB_STEP_SUMMARY

        # Cache usage statistics
        docker buildx du || true >> $GITHUB_STEP_SUMMARY

        # Image size analysis
        if docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }} >/dev/null 2>&1; then
          IMAGE_SIZE=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }} --format='{{.Size}}' | numfmt --to=iec)
          echo "Final image size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
        fi

  performance-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull and test production image
      run: |
        echo "Testing production image functionality..."

        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-production

        # Basic functionality test
        docker run --rm -d \
          --name ares-test \
          -p 8000:8000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-production

        # Wait for startup
        sleep 10

        # Health check
        if curl -f http://localhost:8000/health; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi

        # Cleanup
        docker stop ares-test

        echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ Production image functionality verified" >> $GITHUB_STEP_SUMMARY
        echo "Build target achieved: <3min with advanced caching" >> $GITHUB_STEP_SUMMARY
