[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "project_name"
version = "0.1.0"
description = "A modern Python project template with best practices"
requires-python = ">=3.12,<3.13"
dependencies = [
    # Core utilities
    "requests>=2.31.0",
    "click>=8.1.7",
    "rich>=13.7.1",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.1",
    
    # Data handling
    "pandas>=2.2.0",
    "numpy>=1.26.0,<2.0.0",
    
    # Web framework (optional, commonly needed)
    "fastapi>=0.110.0",
    "uvicorn>=0.29.0",
    "pydantic>=2.7.0",
]

[dependency-groups]
test = [
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "coverage[toml]>=7.4.0",
]
format = [
    "black>=24.4.0",
    "isort>=5.13.2",
]
lint = [
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.12",
]
security = [
    "bandit[toml]>=1.7.8",
    "safety>=3.1.0",
    "detect-secrets>=1.5.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]
dev = [
    "pre-commit>=3.7.0",
]
# Convenience group that includes everything
all = [
    # Test dependencies
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "coverage[toml]>=7.4.0",
    # Format dependencies
    "black>=24.4.0",
    "isort>=5.13.2",
    # Lint dependencies
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.12",
    # Security dependencies
    "bandit[toml]>=1.7.8",
    "safety>=3.1.0",
    "detect-secrets>=1.5.0",
    # Dev dependencies
    "pre-commit>=3.7.0",
]

[project.scripts]
project-cli = "project_name.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | docs
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = ["venv", ".venv", "docs"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short --cov=src --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:"
]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "S",    # bandit
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe complexity
    "N",    # pep8-naming
    "D",    # pydocstyle
    "ANN",  # flake8-annotations
    "Q",    # flake8-quotes
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
]
ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "S101",    # use of assert
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D203",    # 1 blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "ANN401",  # Dynamically typed expressions (typing.Any)
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "docs",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D100", "D101", "D102", "D103", "ANN"]  # allow assert and no docstrings in tests

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.bandit]
exclude_dirs = ["tests", "docs", "venv", ".venv"]
skips = ["B101"]  # assert_used - we allow asserts

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
follow_imports = "normal"
namespace_packages = true
explicit_package_bases = true
exclude = [
    "docs",
    "venv",
    ".venv",
    "tests/fixtures",
    "build",
    "dist"
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_decorators = false

# UV-specific configuration
[tool.uv]
# UV will automatically detect and use the dependency-groups above

# UV workspace configuration
[tool.uv.workspace]
# members = ["packages/*"]  # For multi-package workspaces
