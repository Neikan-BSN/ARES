# Pre-commit Configuration: AI Agent System Variant (Parallel Optimized)
# Optimized for ARES Agent Reliability Enforcement System with parallel execution
# Context7 IDs: pre-commit-hooks-python-ecosystem-2024, python-async-patterns-fastapi-production-2024

fail_fast: false
default_stages: [pre-commit]
minimum_pre_commit_version: '3.0.0'

# Parallel execution optimization
default_install_hook_types: [pre-commit]
default_language_version:
  python: python3.12

# CI optimization for AI agent systems with parallel support
ci:
  skip:
    - agent-config-deep-validation  # Skip expensive agent validation in CI
  autofix_prs: true
  autofix_commit_msg: "style: auto-fix pre-commit hooks ü§ñ"
  # Enable parallel execution in CI
  parallel_mode: true

repos:
  # PARALLEL GROUP 1: Fast Environment & Language Checks
  - repo: local
    hooks:
      - id: python-ai-version-check
        name: "ü§ñ Python 3.12.10 for AI Agent Systems"
        entry: bash
        language: system
        pass_filenames: false
        stages: [pre-commit]
        args:
          - -c
          - |
            PYTHON_VERSION=$(python --version 2>&1 | cut -d' ' -f2)
            MAJOR_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f1,2)
            if [[ "$MAJOR_MINOR" != "3.12" ]]; then
              echo "‚ùå Python 3.12.x required for AI agent compatibility"
              echo "üí° AI agents require latest async/await patterns"
              exit 1
            fi
            echo "‚úÖ Python $PYTHON_VERSION validated for AI agent systems"

      - id: ai-agent-env-check
        name: "üß† AI Agent Environment Validation"
        entry: bash
        language: system
        pass_filenames: false
        stages: [pre-commit]
        args:
          - -c
          - |
            # Check for AI agent dependencies
            if [[ -f "pyproject.toml" ]]; then
              if ! grep -q -E "(openai|anthropic|agent)" pyproject.toml; then
                echo "‚ö†Ô∏è  No AI/agent dependencies detected"
              fi
              if ! grep -q "async" pyproject.toml; then
                echo "‚ö†Ô∏è  Consider async libraries for agent coordination"
              fi
            fi

            # Check for agent configuration directories
            if [[ ! -d "agents" ]] && [[ ! -d "src/agents" ]] && [[ ! -d "coordination" ]]; then
              echo "‚ö†Ô∏è  No agent directory structure detected"
            fi
            echo "‚úÖ AI agent environment validated"

  # PARALLEL GROUP 2: Code Quality & Formatting (Fast)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        name: "üîç Ruff Linting (AI Agent Patterns)"
        args:
          - --select=E9,F,B,S,ASYNC  # Include async pattern validation
          - --ignore=B008,S314,S324,B017,B024  # AI agent patterns
          - --fix
        types: [python]
        stages: [pre-commit]
        # Enable parallel execution for ruff
        require_serial: false

      - id: ruff-format
        name: "üé® Ruff Formatting (AI Agent)"
        args:
          - --target-version=py312
        types: [python]
        stages: [pre-commit]
        require_serial: false

  # PARALLEL GROUP 3: AI Agent-Specific Validations (Independent)
  - repo: local
    hooks:
      - id: agent-config-validation
        name: "ü§ñ Agent Configuration Validation"
        entry: bash
        language: system
        files: '.*agent.*\.(json|yaml|yml)$'
        stages: [pre-commit]
        require_serial: false
        args:
          - -c
          - |
            # Validate agent configuration files
            for file in "$@"; do
              echo "üîç Validating agent config: $file"

              if [[ "$file" == *.json ]]; then
                python -c 'import json, sys; config = json.load(open("'"$file"'"))' || { echo "‚ùå Invalid JSON in $file"; exit 1; }
                if grep -q "api_key" "$file"; then
                  echo "‚ùå API key found in config file - use environment variables"
                  exit 1
                fi
              fi
            done
            echo "‚úÖ Agent configurations validated"

      - id: mcp-integration-validation
        name: "üîó MCP Server Integration Validation"
        entry: bash
        language: system
        files: '.*mcp.*\.(py|json|yaml|yml)$'
        stages: [pre-commit]
        require_serial: false
        args:
          - -c
          - |
            # Validate MCP integration patterns
            for file in "$@"; do
              if [[ "$file" == *.py ]]; then
                if grep -q "mcp" "$file"; then
                  # Check for proper MCP patterns
                  if ! grep -q "async\|await" "$file"; then
                    echo "‚ö†Ô∏è  Consider async patterns for MCP integration in $file"
                  fi

                  # Check for error handling
                  if ! grep -q "except.*MCP\|except.*Error" "$file"; then
                    echo "‚ö†Ô∏è  Consider MCP-specific error handling in $file"
                  fi
                fi
              fi
            done
            echo "‚úÖ MCP integration validated"

      - id: ai-agent-security
        name: "üîí AI Agent Security Validation"
        entry: bash
        language: system
        types: [python]
        stages: [pre-commit]
        require_serial: false
        args:
          - -c
          - |
            # Check for AI agent security patterns
            for file in "$@"; do
              # Check for API key exposure
              if grep -q -E "(api_key|API_KEY|openai_key|anthropic_key)" "$file"; then
                if ! grep -q "os.environ\|getenv\|config" "$file"; then
                  echo "‚ùå Potential API key exposure in $file"
                  echo "üí° Use environment variables for API keys"
                  exit 1
                fi
              fi

              # Check for input sanitization
              if grep -q "input\|user_message\|prompt" "$file"; then
                if ! grep -q "sanitize\|validate\|clean" "$file"; then
                  echo "‚ö†Ô∏è  Consider input sanitization for user prompts in $file"
                fi
              fi
            done
            echo "‚úÖ AI agent security validated"

  # PARALLEL GROUP 4: Security & Secrets Detection (Independent)
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        stages: [pre-commit]
        require_serial: false
        args:
          - --baseline
          - .secrets.baseline
          - --disable-plugin
          - KeywordDetector
          - --cores
          - "4"  # Use 4 cores for parallel secret scanning
        exclude: |
          (?x)^(
              .*\.lock$|
              .*\.log$|
              .*models/.*|
              .*\.min\.js$|
              tests/.*fixtures.*
          )$

  # PARALLEL GROUP 5: File Format Validation (All Independent)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        stages: [pre-commit]
        require_serial: false
      - id: end-of-file-fixer
        name: Fix End of Files
        stages: [pre-commit]
        require_serial: false
      - id: check-yaml
        exclude: '^.pre-commit-config.yaml$'
        stages: [pre-commit]
        require_serial: false
      - id: check-json
        stages: [pre-commit]
        require_serial: false
      - id: check-toml
        stages: [pre-commit]
        require_serial: false
      - id: check-added-large-files
        args: [--maxkb=2000]  # Allow larger files for AI models
        stages: [pre-commit]
        require_serial: false
      - id: check-ast
        stages: [pre-commit]
        require_serial: false
      - id: debug-statements
        stages: [pre-commit]
        require_serial: false

# AI Agent System usage notes (Parallel Optimized):
# 1. Hooks organized in 5 parallel groups for maximum concurrency
# 2. Most hooks marked with require_serial: false for parallel execution
# 3. Secrets detection uses 4 cores for parallel scanning
# 4. Environment variables: PRE_COMMIT_PARALLEL=4 for optimal performance
# 5. Groups are independent and can run simultaneously:
#    - Group 1: Environment validation (fast, foundational)
#    - Group 2: Code quality & formatting (ruff)
#    - Group 3: AI agent-specific validations
#    - Group 4: Security & secrets detection
#    - Group 5: File format validation
# 6. Compatible with MCP server ecosystem validation
# 7. Parallel execution reduces total runtime while maintaining quality
